type Request @model {
    id: ID!
    description: String!
    quantity: String!
    status: Int
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    order: Order! @hasOne
    user: User! @belongsTo
    pantry: Pantry! @hasOne
}

"""
Create Request Input Type
"""
input CreateRequestInput {
    " Request description "
    description: String! @rules(apply: ["required"])
    " Request product quantity "
    quantity: String! @rules(apply: ["required"])
    " Order relation (ID) "
    order_id: ID!
        @globalId(decode: "ID")
        @rules(apply: ["required"])
}

"""
Update Request Input Type
"""
input UpdateRequestInput {
    id: ID!
        @globalId(decode: "ID")
        @rules(apply: ["required"])
    " Request description "
    description: String! @rules(apply: ["required"])
    " Request product quantity "
    quantity: String! @rules(apply: ["required"])
}

extend type Query @middleware(checks: ["auth:api"]) {
    " All requests (Order by clause) "
    requests(
        order_id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(apply: ["required"])
        orderBy: [OrderByClause!] @orderBy
    ): [Request!]! @all
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    " Create Request "
    createRequest(input: CreateRequestInput! @spread): Request
        @field(resolver: "RequestMutator@create")
        @broadcast(subscription: "requestCreated")
    " Update Request "
    updateRequest(input: UpdateRequestInput! @spread): Request
        @can(ability: "update", find: "id")
        @field(resolver: "RequestMutator@update")
        @broadcast(subscription: "requestCreated")
    " Reject Request "
    denyRequest(
        id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(apply: ["required"])
    ): Request
        @can(ability: "update", find: "id")
        @field(resolver: "RequestMutator@deny")
        @broadcast(subscription: "requestCreated")
    " Approve Request "
    approveRequest(
        id: ID!
            @globalId(decode: "ID")
            @eq
            @rules(apply: ["required"])
    ): Request
        @can(ability: "update", find: "id")
        @field(resolver: "RequestMutator@approve")
        @broadcast(subscription: "requestCreated")
}

extend type Subscription {
    " Update Created Request "
    requestCreated(order_id: ID!): Request
}
