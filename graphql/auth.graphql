""" Login Input Type """
input LoginInput {
    " Identificador del Usuario Eamil "
    username: String!
        @rules(
            apply: ["required", "email"],
            messages: {
                required: "El campo es requerido.",
                email: "No es una direccion de correo valida."
            }
        )
    " Contrase√±a de Usuario "
    password: String!
        @rules(
            apply: ["required"],
            messages: {required: "El campo es requerido."}
        )
}

input RefreshTokenInput {
    refreshToken: String
        @rename(attribute: "refresh_token")
}

type AuthPayload {
    accessToken: String!
        @rename(attribute: "access_token")
    refreshToken: String!
        @rename(attribute: "refresh_token")
    expiresIn: Int!
        @rename(attribute: "expires_in")
    tokenType: String!
        @rename(attribute: "token_type")
    user: User!
}

type RefreshTokenPayload {
    accessToken: String!
        @rename(attribute: "access_token")
    refreshToken: String!
        @rename(attribute: "refresh_token")
    expiresIn: Int!
        @rename(attribute: "expires_in")
    tokenType: String!
        @rename(attribute: "token_type")
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String!
        @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String!
        @rules(
            apply: ["required", "email"],
            messages: {
                required: "El campo es requerido.",
                email: "No es una direccion de correo valida."
            }
        )
    token: String!
        @rules(
            apply: ["required", "string"],
            messages: { required: "El campo es requerido."}
        )
    password: String!
        @rules(
            apply: ["required", "confirmed", "min:6"],
            messages: {
                required: "El campo es requerido.",
                confirmed: "Los campos no coinciden.",
                min: "El minimo es de 6 caracteres."
            }
        )
    password_confirmation: String!
}

input RegisterInput {
    name: String!
        @rules(
            apply: ["required", "string"],
            messages: {required: "El campo es requerido."}
        )
    email: String!
        @rules(
            apply: ["required", "email", "unique:users,email"],
            messages: {
                required: "El campo es requerido.",
                email: "No es una direccion de correo valida.",
                unique: "El correo electronico ya existe."
            }
        )
    password: String!
        @rules(
            apply: ["required", "confirmed", "min:6"],
            messages: {
                required: "El campo es requerido.",
                confirmed: "Los campos no coinciden.",
                min: "El minimo es de 6 caracteres."
            }
        )
    password_confirmation: String!
        @rules(
            apply: ["required"],
            messages: {required: "El campo es requerido."}
        )
    type: Int!
        @rules(
            apply: ["required"],
            messages: {required: "El campo es requerido."}
        )
}

extend type Mutation {
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
        )
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
        )
    register(input: RegisterInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
        )
}
