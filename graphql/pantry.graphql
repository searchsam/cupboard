
type Pantry @model {
    id: ID!
    existence: Int!
    createdAt: DateTime!
        @rename(attribute: "created_at")
    updatedAt: DateTime!
        @rename(attribute: "updated_at")
    request: Request! @belongsTo
}

enum PantryStatus {
    SOLDOUT @enum(value: 0)
    STOCK @enum(value: 1)
}

extend type Query @middleware(checks: ["auth:api"]) {
    products(orderBy: [OrderByClause!] @orderBy): [Pantry!]! @all
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    decrease(id: ID! @globalId(decode: "ID") @eq
        @rules(
            apply: ["required"],
            messages: { required: "El campo es requerido"}
        )
    ): Pantry
        @can(ability: "update", find: "id")
        @field(resolver: "PantryMutator@decrease")
}
