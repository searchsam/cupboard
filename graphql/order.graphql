"""
Order Model
"""
type Order @model {
    id: ID!
    " Order name "
    name: String!
    " Order status "
    status: Int!
    " Order deadline date "
    deadline: DateTime!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
    " Request relation "
    requests: [Request!]! @hasMany
    " User relation "
    user: User! @belongsTo
}

"""
Order Input Type
"""
input CreateOrderInput {
    " Order name "
    name: String! @rules(apply: ["required"])
    " Order deadline date "
    deadline: Date! @rules(apply: ["required", "date"])
}

"""
Update Order Input Type
"""
input UpdateOrderInput {
    id: ID! @globalId(decode: "ID") @rules(apply: ["required"])
    " Order name "
    name: String! @rules(apply: ["required"])
    " Order deadline date "
    deadline: Date! @rules(apply: ["required", "date"])
}

extend type Query @middleware(checks: ["auth:api"]) {
    " All orders (Order by clause) "
    orders(orderBy: [OrderByClause!] @orderBy): [Order!]! @all
    " Find order dy ID "
    order(
        id: ID!
        @globalId(decode: "ID")
        @eq
        @rules(apply: ["required"])
    ): Order! @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    " Create order "
    createOrder(input: CreateOrderInput! @spread): Order
        @can(ability: "create")
        @field(resolver: "OrderMutator@create")
        @broadcast(subscription: "orderCreated")

    " Update Order "
    updateOrder(input: UpdateOrderInput! @spread): Order
        @can(ability: "update", find: "id")
        @field(resolver: "OrderMutator@update")

    " Shop Order "
    shopOrder(id: ID! @globalId(decode: "ID") @eq): Order
        @can(ability: "update", find: "id")
        @field(resolver: "OrderMutator@shop")
}

extend type Subscription {
    " Update Order model "
    orderCreated: Order
}
